{"ast":null,"code":"var _jsxFileName = \"/Users/dessiemompati/Desktop/Development/weather-app/src/containers/AppContainer.js\";\nimport React, { Component } from 'react';\nimport { Route } from 'react-router-dom';\nimport ComplaintPage from '../pages/ComplaintPage';\nimport WeatherPage from '../pages/WeatherPage';\nconst CITIES = ['London', 'Perth', 'Tokyo', 'Rome', 'Singapore', 'Sydney']; // WARNING: Do not store any secrets (such as private API keys) in your React app!\n// https://create-react-app.dev/docs/adding-custom-environment-variables/\n\nconst API_URL = 'https://api.openweathermap.org/data/2.5';\n\nclass AppContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      city: CITIES[0],\n      temperature: '',\n      forecast: []\n    };\n    this.handleCityChange = this.handleCityChange.bind(this);\n  }\n\n  fetchApiData() {\n    fetch(\"\".concat(API_URL, \"/weather?q=\").concat(this.state.city, \"&units=metric&appid=\").concat(process.env.REACT_APP_API_KEY)) // Call the fetch function passing the url of the API as a parameter\n    .then(response => {\n      console.log(response);\n      return response.json(); // Your code for handling the data you get from the API\n    }).then(data => {\n      console.log(data);\n      this.setState({\n        temperature: data.main.temp\n      });\n    }).catch(function (err) {\n      console.error(err); // This is where you run code if the server returns any errors\n    });\n  }\n\n  fetchForecast() {\n    fetch(\"\".concat(API_URL, \"/forecast?q=\").concat(this.state.city, \"&units=metric&appid=\").concat(process.env.REACT_APP_API_KEY)).then(response => response.json()).then(data => {\n      this.setState({\n        forecast: data.list\n      });\n    }).catch(err => {\n      console.error(err);\n    });\n  }\n\n  getRandomCity(array) {\n    return array[Math.floor(Math.random() * array.length)];\n  }\n\n  handleCityChange() {\n    this.setState({\n      city: this.getRandomCity(CITIES)\n    }, () => {\n      this.fetchApiData();\n      this.fetchForecast();\n    });\n  }\n\n  componentDidMount() {\n    this.fetchApiData();\n    this.fetchForecast();\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(Route, {\n      path: \"/\",\n      component: () => {\n        return React.createElement(WeatherPage, {\n          city: this.state.city,\n          temperature: this.state.temperature,\n          forecast: this.state.forecast,\n          changeCity: this.handleCityChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80\n          },\n          __self: this\n        });\n      },\n      exact: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/complain\",\n      component: () => {\n        return React.createElement(ComplaintPage, {\n          city: this.state.city,\n          temperature: this.state.temperature,\n          changeCity: this.handleCityChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default AppContainer;","map":{"version":3,"sources":["/Users/dessiemompati/Desktop/Development/weather-app/src/containers/AppContainer.js"],"names":["React","Component","Route","ComplaintPage","WeatherPage","CITIES","API_URL","AppContainer","constructor","props","state","city","temperature","forecast","handleCityChange","bind","fetchApiData","fetch","process","env","REACT_APP_API_KEY","then","response","console","log","json","data","setState","main","temp","catch","err","error","fetchForecast","list","getRandomCity","array","Math","floor","random","length","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Route } from 'react-router-dom';\nimport ComplaintPage from '../pages/ComplaintPage';\nimport WeatherPage from '../pages/WeatherPage';\n\nconst CITIES = ['London', 'Perth', 'Tokyo', 'Rome', 'Singapore', 'Sydney'];\n\n// WARNING: Do not store any secrets (such as private API keys) in your React app!\n// https://create-react-app.dev/docs/adding-custom-environment-variables/\nconst API_URL = 'https://api.openweathermap.org/data/2.5';\n\nclass AppContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      city: CITIES[0],\n      temperature: '',\n      forecast: []\n    };\n\n    this.handleCityChange = this.handleCityChange.bind(this);\n  }\n\n  fetchApiData() {\n    fetch(\n      `${API_URL}/weather?q=${this.state.city}&units=metric&appid=${process.env.REACT_APP_API_KEY}`\n    ) // Call the fetch function passing the url of the API as a parameter\n      .then(response => {\n        console.log(response);\n        return response.json();\n        // Your code for handling the data you get from the API\n      })\n      .then(data => {\n        console.log(data);\n        this.setState({ temperature: data.main.temp });\n      })\n      .catch(function(err) {\n        console.error(err);\n        // This is where you run code if the server returns any errors\n      });\n  }\n\n  fetchForecast() {\n    fetch(\n      `${API_URL}/forecast?q=${this.state.city}&units=metric&appid=${process.env.REACT_APP_API_KEY}`\n    )\n      .then(response => response.json())\n      .then(data => {\n        this.setState({ forecast: data.list });\n      })\n      .catch(err => {\n        console.error(err);\n      });\n  }\n\n  getRandomCity(array) {\n    return array[Math.floor(Math.random() * array.length)];\n  }\n\n  handleCityChange() {\n    this.setState({ city: this.getRandomCity(CITIES) }, () => {\n      this.fetchApiData();\n      this.fetchForecast();\n    });\n  }\n\n  componentDidMount() {\n    this.fetchApiData();\n    this.fetchForecast()\n  }\n\n  render() {\n    return (\n      <>\n        <Route\n          path=\"/\"\n          component={() => {\n            return (\n              <WeatherPage\n                city={this.state.city}\n                temperature={this.state.temperature}\n                forecast={this.state.forecast}\n                changeCity={this.handleCityChange}\n              />\n            );\n          }}\n          exact\n        />\n\n        <Route\n          path=\"/complain\"\n          component={() => {\n            return (\n              <ComplaintPage\n                city={this.state.city}\n                temperature={this.state.temperature}\n                changeCity={this.handleCityChange}\n              />\n            );\n          }}\n        />\n      </>\n    );\n  }\n}\n\nexport default AppContainer;\n"]},"metadata":{},"sourceType":"module"}