{"ast":null,"code":"import _objectWithoutProperties from \"/Users/dessiemompati/weather-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/dessiemompati/weather-app/src/components/organisms/Forecast.js\";\nimport React, { Fragment } from 'react';\nimport { chunkify } from '../../utils';\nimport DailyWeather from '../molecules/DailyWeather';\n\nconst Forecast = (_ref) => {\n  let forecast = _ref.forecast,\n      props = _objectWithoutProperties(_ref, [\"forecast\"]);\n\n  // Take forecast and split into equal chunks for each day.\n  const chunkedForecast = chunkify(forecast, forecast.length / 5); // Get highest temp from forecast chunk\n\n  const getMaxTemp = array => array.reduce((acc, cur) => acc.main.temp > cur.main.temp ? acc : cur); // Get lowest temp from forecast chunk\n\n\n  const getMinTemp = array => array.reduce((acc, cur) => acc.main.temp < cur.main.temp ? acc : cur);\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, chunkedForecast.map((day, i) => React.createElement(Fragment, {\n    key: i,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, i === 0 && React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, \"Today:\"), i === 1 && React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, \"Upcoming:\"), React.createElement(DailyWeather, {\n    key: day[0].dt,\n    date: day[0].dt_txt,\n    icon: day[0].weather[0].icon,\n    maxTemp: getMaxTemp(day).main.temp,\n    minTemp: getMinTemp(day).main.temp,\n    list: day,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }))));\n};\n\nexport default Forecast;","map":{"version":3,"sources":["/Users/dessiemompati/weather-app/src/components/organisms/Forecast.js"],"names":["React","Fragment","chunkify","DailyWeather","Forecast","forecast","props","chunkedForecast","length","getMaxTemp","array","reduce","acc","cur","main","temp","getMinTemp","map","day","i","dt","dt_txt","weather","icon"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;;AAEA,MAAMC,QAAQ,GAAG,UAA4B;AAAA,MAAzBC,QAAyB,QAAzBA,QAAyB;AAAA,MAAZC,KAAY;;AAC3C;AACA,QAAMC,eAAe,GAAGL,QAAQ,CAACG,QAAD,EAAWA,QAAQ,CAACG,MAAT,GAAkB,CAA7B,CAAhC,CAF2C,CAI3C;;AACA,QAAMC,UAAU,GAAGC,KAAK,IACtBA,KAAK,CAACC,MAAN,CAAa,CAACC,GAAD,EAAMC,GAAN,KAAeD,GAAG,CAACE,IAAJ,CAASC,IAAT,GAAgBF,GAAG,CAACC,IAAJ,CAASC,IAAzB,GAAgCH,GAAhC,GAAsCC,GAAlE,CADF,CAL2C,CAO3C;;;AACA,QAAMG,UAAU,GAAGN,KAAK,IACtBA,KAAK,CAACC,MAAN,CAAa,CAACC,GAAD,EAAMC,GAAN,KAAeD,GAAG,CAACE,IAAJ,CAASC,IAAT,GAAgBF,GAAG,CAACC,IAAJ,CAASC,IAAzB,GAAgCH,GAAhC,GAAsCC,GAAlE,CADF;;AAGA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGN,eAAe,CAACU,GAAhB,CAAoB,CAACC,GAAD,EAAMC,CAAN,KACnB,oBAAC,QAAD;AAAU,IAAA,GAAG,EAAEA,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,CAAC,KAAK,CAAN,IAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADd,EAEGA,CAAC,KAAK,CAAN,IAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFd,EAGE,oBAAC,YAAD;AACE,IAAA,GAAG,EAAED,GAAG,CAAC,CAAD,CAAH,CAAOE,EADd;AAEE,IAAA,IAAI,EAAEF,GAAG,CAAC,CAAD,CAAH,CAAOG,MAFf;AAGE,IAAA,IAAI,EAAEH,GAAG,CAAC,CAAD,CAAH,CAAOI,OAAP,CAAe,CAAf,EAAkBC,IAH1B;AAIE,IAAA,OAAO,EAAEd,UAAU,CAACS,GAAD,CAAV,CAAgBJ,IAAhB,CAAqBC,IAJhC;AAKE,IAAA,OAAO,EAAEC,UAAU,CAACE,GAAD,CAAV,CAAgBJ,IAAhB,CAAqBC,IALhC;AAME,IAAA,IAAI,EAAEG,GANR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADD,CADH,CADF;AAkBD,CA7BD;;AA+BA,eAAed,QAAf","sourcesContent":["import React, { Fragment } from 'react';\nimport { chunkify } from '../../utils';\nimport DailyWeather from '../molecules/DailyWeather';\n\nconst Forecast = ({ forecast, ...props }) => {\n  // Take forecast and split into equal chunks for each day.\n  const chunkedForecast = chunkify(forecast, forecast.length / 5);\n\n  // Get highest temp from forecast chunk\n  const getMaxTemp = array =>\n    array.reduce((acc, cur) => (acc.main.temp > cur.main.temp ? acc : cur));\n  // Get lowest temp from forecast chunk\n  const getMinTemp = array =>\n    array.reduce((acc, cur) => (acc.main.temp < cur.main.temp ? acc : cur));\n\n  return (\n    <div>\n      {chunkedForecast.map((day, i) => (\n        <Fragment key={i}>\n          {i === 0 && <h2>Today:</h2>}\n          {i === 1 && <h2>Upcoming:</h2>}\n          <DailyWeather\n            key={day[0].dt}\n            date={day[0].dt_txt}\n            icon={day[0].weather[0].icon}\n            maxTemp={getMaxTemp(day).main.temp}\n            minTemp={getMinTemp(day).main.temp}\n            list={day}\n          />\n        </Fragment>\n      ))}\n    </div>\n  );\n};\n\nexport default Forecast;\n"]},"metadata":{},"sourceType":"module"}